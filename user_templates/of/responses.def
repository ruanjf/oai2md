{{ data.responses = data.utils.getResponses(data); }}
{{ data.responseSchemas = false; }}
{{~ data.responses :response }}
{{ if (response.content) data.responseSchemas = true; }}
{{~}}

{{= data.tags.section }}

{{ data.responseSchemas = false; }}
{{~ data.responses :response }}
{{ if (response.content && !response.$ref && !data.utils.isPrimitive(response.type)) data.responseSchemas = true; }}
{{~}}
{{? data.responseSchemas }}
{{~ data.responses :response}}
{{? response.content && !response.$ref && !data.utils.isPrimitive(response.type)}}
{{? Object.keys(response.content).length }}
{{ var responseKey = Object.keys(response.content)[0]; }}
{{ var responseSchema = data.utils.schemaDotDisplayName(data.utils.unWrapMsgSchema(response.content[responseKey].schema)); }}
{{ var enums = []; }}
{{ var blocks = data.utils.filterSchemaArrayMapProp(data.utils.schemaToArray(responseSchema,0,{trim:true,join:true},data)); }}
{{ for (var block of blocks) {
     for (var p of block.rows) {
       if (p.schema && p.schema.enum) {
         var i=0;
         var ds = p.schema['x-enum-descriptions'] || new Array(p.schema.enum.length);
         for (var e of p.schema.enum) {
           enums.push({name:p.name, value:e, description: ds[i]||''});
           i++;
         }
       }
     }
   }
}}

{{? blocks[0].rows.length || blocks[0].title }}
状态码 **{{=response.status}}**

{{~ blocks :block}}
{{? block.title }}*{{=block.title}}*
{{?}}

|字段|类型|必须|说明|
|---|---|---|---|---|
{{~block.rows :p}}{{ var safeType = p.safeType; if (p.schema['x-type-map']) { safeType = '{'+safeType+'}'; } }}|{{= p.schema['x-display-name'] || p.displayName }}|{{=safeType}}|{{? p.required}}是{{?}}{{? !p.required}}否{{?}}|{{=p.description||''}}|
{{~}}
{{~}}
{{?}}

{{? enums.length < 0 }}
#### 枚举值

|字段|值|说明|
|---|---|---|
{{~ enums :e}}|{{=e.name}}|{{=data.utils.toPrimitive(e.value)}}|{{=e.description}}|
{{~}}

{{?}}
{{?}}

{{ data.response = response; }}

{{?}}
{{~}}
{{?}}

{{ data.responseHeaders = data.utils.getResponseHeaders(data); }}

{{= data.tags.endSection }}
